{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lexid\\\\dev\\\\manifestation-calendar\\\\src\\\\features\\\\Calendar\\\\Calendar.jsx\",\n  _s = $RefreshSig$();\nimport { Calendar, Views, dateFnsLocalizer } from \"react-big-calendar\";\nimport { format, parse, startOfWeek, getDay } from \"date-fns\";\nimport enUS from \"date-fns/locale/en-US\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\"; // You can override this with Tailwind later\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst locales = {\n  \"en-US\": enUS\n};\nconst localizer = dateFnsLocalizer({\n  format,\n  parse,\n  startOfWeek,\n  getDay,\n  locales\n});\n// Calculate the cycle phase for a given date\nfunction getCyclePhase(date, startDate) {\n  const diff = Math.floor((date - startDate) / (1000 * 60 * 60 * 24)) % 28;\n  if (diff < 5) return \"ðŸ©¸ Menstrual\";\n  if (diff < 14) return \"ðŸŒ± Follicular\";\n  if (diff < 16) return \"ðŸŒ¸ Ovulation\";\n  return \"ðŸ”¥ Luteal\";\n}\n\n// Generate one event per day in the visible month\nfunction generateCalendarEvents(monthDate) {\n  const start = startOfMonth(monthDate);\n  const end = endOfMonth(monthDate);\n  const events = [];\n  let day = start;\n  while (day <= end) {\n    const dateStr = format(day, \"yyyy-MM-dd\");\n    const moon = moonPhases[dateStr] || \"\";\n    const phase = getCyclePhase(day, periodStart);\n    events.push({\n      title: `${moon} ${phase}`,\n      start: day,\n      end: day,\n      allDay: true\n    });\n    day = addDays(day, 1);\n  }\n  return events;\n}\nconst events = useMemo(() => generateCalendarEvents(currentDate), [currentDate]);\nexport default function MyCalendar() {\n  _s();\n  const [view, setView] = useState(Views.MONTH);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"h-[90vh]\",\n    children: /*#__PURE__*/_jsxDEV(Calendar, {\n      localizer: localizer,\n      events: events,\n      startAccessor: \"start\",\n      endAccessor: \"end\",\n      defaultView: view,\n      onView: setView,\n      style: {\n        height: \"100%\",\n        backgroundColor: \"white\",\n        padding: \"1rem\"\n      },\n      toolbar: true,\n      views: ['month', 'week', 'day']\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(MyCalendar, \"r90/Dwgn5WuIRCcGtDqdoaA+apc=\");\n_c = MyCalendar;\nvar _c;\n$RefreshReg$(_c, \"MyCalendar\");","map":{"version":3,"names":["Calendar","Views","dateFnsLocalizer","format","parse","startOfWeek","getDay","enUS","React","useState","jsxDEV","_jsxDEV","locales","localizer","getCyclePhase","date","startDate","diff","Math","floor","generateCalendarEvents","monthDate","start","startOfMonth","end","endOfMonth","events","day","dateStr","moon","moonPhases","phase","periodStart","push","title","allDay","addDays","useMemo","currentDate","MyCalendar","_s","view","setView","MONTH","className","children","startAccessor","endAccessor","defaultView","onView","style","height","backgroundColor","padding","toolbar","views","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/lexid/dev/manifestation-calendar/src/features/Calendar/Calendar.jsx"],"sourcesContent":["import { Calendar, Views, dateFnsLocalizer } from \"react-big-calendar\";\r\nimport { format, parse, startOfWeek, getDay } from \"date-fns\";\r\nimport enUS from \"date-fns/locale/en-US\";\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\"; // You can override this with Tailwind later\r\nimport React, { useState } from \"react\";\r\n\r\nconst locales = {\r\n  \"en-US\": enUS,\r\n};\r\n\r\nconst localizer = dateFnsLocalizer({\r\n  format,\r\n  parse,\r\n  startOfWeek,\r\n  getDay,\r\n  locales,\r\n});\r\n// Calculate the cycle phase for a given date\r\nfunction getCyclePhase(date, startDate) {\r\n  const diff = Math.floor((date - startDate) / (1000 * 60 * 60 * 24)) % 28;\r\n  if (diff < 5) return \"ðŸ©¸ Menstrual\";\r\n  if (diff < 14) return \"ðŸŒ± Follicular\";\r\n  if (diff < 16) return \"ðŸŒ¸ Ovulation\";\r\n  return \"ðŸ”¥ Luteal\";\r\n}\r\n\r\n// Generate one event per day in the visible month\r\nfunction generateCalendarEvents(monthDate) {\r\n  const start = startOfMonth(monthDate);\r\n  const end = endOfMonth(monthDate);\r\n  const events = [];\r\n\r\n  let day = start;\r\n  while (day <= end) {\r\n    const dateStr = format(day, \"yyyy-MM-dd\");\r\n    const moon = moonPhases[dateStr] || \"\";\r\n    const phase = getCyclePhase(day, periodStart);\r\n\r\n    events.push({\r\n      title: `${moon} ${phase}`,\r\n      start: day,\r\n      end: day,\r\n      allDay: true,\r\n    });\r\n\r\n    day = addDays(day, 1);\r\n  }\r\n\r\n  return events;\r\n}\r\n  const events = useMemo(() => generateCalendarEvents(currentDate), [currentDate]);\r\n\r\n\r\nexport default function MyCalendar() {\r\n  const [view, setView] = useState(Views.MONTH);\r\n\r\n  return (\r\n    <div className=\"h-[90vh]\">\r\n      <Calendar\r\n        localizer={localizer}\r\n        events={events}\r\n        startAccessor=\"start\"\r\n        endAccessor=\"end\"\r\n        defaultView={view}\r\n        onView={setView}\r\n        style={{ height: \"100%\", backgroundColor: \"white\", padding: \"1rem\" }}\r\n        toolbar={true}\r\n        views={['month', 'week', 'day']}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}