{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lexid\\\\dev\\\\manifestation-calendar\\\\src\\\\features\\\\Calendar\\\\Calendar.jsx\",\n  _s = $RefreshSig$();\n// src/components/MyCalendar.jsx\n\nimport React, { useState, useMemo } from \"react\";\nimport { Calendar, Views, dateFnsLocalizer } from \"react-big-calendar\";\nimport { format, parse, startOfWeek, getDay, addDays, startOfMonth, endOfMonth } from \"date-fns\";\nimport enUS from \"date-fns/locale/en-US\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\n\n// --- Localization for date-fns ---\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst locales = {\n  \"en-US\": enUS\n};\nconst localizer = dateFnsLocalizer({\n  format,\n  parse,\n  startOfWeek,\n  getDay,\n  locales\n});\n\n// --- Configuration ---\nconst periodStart = new Date(2025, 5, 3); // June 3, 2025\n\n// Placeholder moon phases for June 2025\nconst moonPhases = {\n  \"2025-06-06\": \"ðŸŒ‘\",\n  // New Moon\n  \"2025-06-14\": \"ðŸŒ“\",\n  // First Quarter\n  \"2025-06-21\": \"ðŸŒ•\",\n  // Full Moon\n  \"2025-06-28\": \"ðŸŒ—\" // Last Quarter\n};\n\n// Get the user's current cycle phase for any day\nfunction getCyclePhase(date, startDate) {\n  const diff = Math.floor((date - startDate) / (1000 * 60 * 60 * 24)) % 28;\n  if (diff < 5) return \"ðŸ©¸ Menstrual\";\n  if (diff < 14) return \"ðŸŒ± Follicular\";\n  if (diff < 16) return \"ðŸŒ¸ Ovulation\";\n  return \"ðŸ”¥ Luteal\";\n}\n\n// Create 1 event per day for the current visible month\nfunction generateCalendarEvents(monthDate) {\n  const start = startOfMonth(monthDate);\n  const end = endOfMonth(monthDate);\n  const events = [];\n  let day = start;\n  while (day <= end) {\n    const dateStr = format(day, \"yyyy-MM-dd\");\n    const moon = moonPhases[dateStr] || \"\";\n    const phase = getCyclePhase(day, periodStart);\n    events.push({\n      title: `${moon} ${phase}`,\n      start: day,\n      end: day,\n      allDay: true\n    });\n    day = addDays(day, 1);\n  }\n  return events;\n}\nexport default function MyCalendar() {\n  _s();\n  const [view, setView] = useState(Views.MONTH);\n  const [currentDate, setCurrentDate] = useState(new Date());\n\n  // This memoizes the events based on the current month view\n  const events = useMemo(() => generateCalendarEvents(currentDate), [currentDate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"h-[90vh] bg-white p-4 rounded shadow\",\n    children: /*#__PURE__*/_jsxDEV(Calendar, {\n      localizer: localizer,\n      events: events,\n      startAccessor: \"start\",\n      endAccessor: \"end\",\n      defaultView: view,\n      onView: setView,\n      onNavigate: setCurrentDate,\n      toolbar: true,\n      views: ['month', 'week', 'day'],\n      messages: {\n        month: \"Cycle\",\n        week: \"Energy\",\n        day: \"Focus\"\n      },\n      style: {\n        height: \"100%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n_s(MyCalendar, \"Oc4rU8KIFqdD+ZV21xg8ux+Gvuw=\");\n_c = MyCalendar;\nvar _c;\n$RefreshReg$(_c, \"MyCalendar\");","map":{"version":3,"names":["React","useState","useMemo","Calendar","Views","dateFnsLocalizer","format","parse","startOfWeek","getDay","addDays","startOfMonth","endOfMonth","enUS","jsxDEV","_jsxDEV","locales","localizer","periodStart","Date","moonPhases","getCyclePhase","date","startDate","diff","Math","floor","generateCalendarEvents","monthDate","start","end","events","day","dateStr","moon","phase","push","title","allDay","MyCalendar","_s","view","setView","MONTH","currentDate","setCurrentDate","className","children","startAccessor","endAccessor","defaultView","onView","onNavigate","toolbar","views","messages","month","week","style","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/lexid/dev/manifestation-calendar/src/features/Calendar/Calendar.jsx"],"sourcesContent":["// src/components/MyCalendar.jsx\r\n\r\nimport React, { useState, useMemo } from \"react\";\r\nimport {\r\n  Calendar,\r\n  Views,\r\n  dateFnsLocalizer,\r\n} from \"react-big-calendar\";\r\nimport {\r\n  format,\r\n  parse,\r\n  startOfWeek,\r\n  getDay,\r\n  addDays,\r\n  startOfMonth,\r\n  endOfMonth,\r\n} from \"date-fns\";\r\nimport enUS from \"date-fns/locale/en-US\";\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\r\n\r\n// --- Localization for date-fns ---\r\nconst locales = { \"en-US\": enUS };\r\nconst localizer = dateFnsLocalizer({\r\n  format,\r\n  parse,\r\n  startOfWeek,\r\n  getDay,\r\n  locales,\r\n});\r\n\r\n// --- Configuration ---\r\nconst periodStart = new Date(2025, 5, 3); // June 3, 2025\r\n\r\n// Placeholder moon phases for June 2025\r\nconst moonPhases = {\r\n  \"2025-06-06\": \"ðŸŒ‘\", // New Moon\r\n  \"2025-06-14\": \"ðŸŒ“\", // First Quarter\r\n  \"2025-06-21\": \"ðŸŒ•\", // Full Moon\r\n  \"2025-06-28\": \"ðŸŒ—\", // Last Quarter\r\n};\r\n\r\n// Get the user's current cycle phase for any day\r\nfunction getCyclePhase(date, startDate) {\r\n  const diff = Math.floor((date - startDate) / (1000 * 60 * 60 * 24)) % 28;\r\n  if (diff < 5) return \"ðŸ©¸ Menstrual\";\r\n  if (diff < 14) return \"ðŸŒ± Follicular\";\r\n  if (diff < 16) return \"ðŸŒ¸ Ovulation\";\r\n  return \"ðŸ”¥ Luteal\";\r\n}\r\n\r\n// Create 1 event per day for the current visible month\r\nfunction generateCalendarEvents(monthDate) {\r\n  const start = startOfMonth(monthDate);\r\n  const end = endOfMonth(monthDate);\r\n  const events = [];\r\n\r\n  let day = start;\r\n  while (day <= end) {\r\n    const dateStr = format(day, \"yyyy-MM-dd\");\r\n    const moon = moonPhases[dateStr] || \"\";\r\n    const phase = getCyclePhase(day, periodStart);\r\n\r\n    events.push({\r\n      title: `${moon} ${phase}`,\r\n      start: day,\r\n      end: day,\r\n      allDay: true,\r\n    });\r\n\r\n    day = addDays(day, 1);\r\n  }\r\n\r\n  return events;\r\n}\r\n\r\nexport default function MyCalendar() {\r\n  const [view, setView] = useState(Views.MONTH);\r\n  const [currentDate, setCurrentDate] = useState(new Date());\r\n\r\n  // This memoizes the events based on the current month view\r\n  const events = useMemo(\r\n    () => generateCalendarEvents(currentDate),\r\n    [currentDate]\r\n  );\r\n\r\n  return (\r\n    <div className=\"h-[90vh] bg-white p-4 rounded shadow\">\r\n      <Calendar\r\n        localizer={localizer}\r\n        events={events}\r\n        startAccessor=\"start\"\r\n        endAccessor=\"end\"\r\n        defaultView={view}\r\n        onView={setView}\r\n        onNavigate={setCurrentDate}\r\n        toolbar={true}\r\n        views={['month', 'week', 'day']}\r\n        messages={{\r\n          month: \"Cycle\",\r\n          week: \"Energy\",\r\n          day: \"Focus\",\r\n        }}\r\n        style={{ height: \"100%\" }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}